package main

import (
	"fmt"
	"os"

	"github.com/gorilla/mux"
	"github.com/mylxsw/asteria/log"
	"github.com/mylxsw/glacier"
	"github.com/mylxsw/glacier/starter/application"
	"github.com/mylxsw/glacier/web"
	"github.com/urfave/cli"
	"github.com/urfave/cli/altsrc"
    "{{ .Module }}/api"
    "{{ .Module }}/config"
)

var (
	Version   = "1.0"
	GitCommit = ""
)

func main() {
	app := application.Create(fmt.Sprintf("%s(%s)", Version, GitCommit))

	{{ if .WithHttpServer }}
	app.AddFlags(altsrc.NewStringFlag(cli.StringFlag{
        Name:  "listen",
        Usage: "http listen addr",
        Value: ":8080",
    }))

    app.WithHttpServer()
	{{ end }}

	app.Singleton(func(c glacier.FlagContext) *config.Config {
		return &config.Config{
			{{ if .WithHttpServer }}Listen: c.String("listen"),{{ end }}
		}
	})

	{{ if .WithHttpServer }}app.Provider(api.ServiceProvider{}){{ end }}

	app.Main(func(conf *config.Config, router *mux.Router) {
        if log.DebugEnabled() {
            log.With(conf).Debug("configuration loaded")
            {{ if .WithHttpServer }}
            for _, r := range web.GetAllRoutes(router) {
                log.Debugf("route: %s -> %s | %s | %s", r.Name, r.Methods, r.PathTemplate, r.PathRegexp)
            }
            {{ end }}
        }
	})

	if err := app.Run(os.Args); err != nil {
		log.Errorf("exit with error: %s", err)
	}
}
