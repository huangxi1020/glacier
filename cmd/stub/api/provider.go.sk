package api

import (
	"fmt"
	"net/http"
	"runtime/debug"

	"github.com/gorilla/mux"
	{{- if eq .WithSessionSupport "Y" }}
	"github.com/gorilla/sessions"
	// "github.com/mylxsw/go-utils/str"
	// "encoding/gob"
	{{- end }}
	"github.com/mylxsw/asteria/log"
	"github.com/mylxsw/glacier/infra"
	"github.com/mylxsw/glacier/listener"
	"github.com/mylxsw/glacier/web"
	"{{ .Package }}/config"

	"github.com/prometheus/client_golang/prometheus/promhttp"
)

type Provider struct{}

func (s Provider) Aggregates() []infra.Provider {
    return []infra.Provider{
        web.Provider(
            listener.FlagContext("listen"),
            web.SetRouteHandlerOption(s.routes),
            web.SetMuxRouteHandlerOption(s.muxRoutes),
            web.SetExceptionHandlerOption(s.exceptionHandler),
            web.SetIgnoreLastSlashOption(true),
        ),
    }
}

func (s Provider) Register(cc infra.Binder) {}

func (s Provider) exceptionHandler(ctx web.Context, err interface{}) web.Response {
	log.Errorf("error: %v, call stack: %s", err, debug.Stack())
	return ctx.JSONWithCode(web.M{
		"error": fmt.Sprintf("%v", err),
	}, http.StatusInternalServerError)
}

func (s Provider) muxRoutes(cc infra.Resolver, router *mux.Router) {
	cc.MustResolve(func(conf *config.Config) {
		// prometheus metrics
		router.PathPrefix("/metrics").Handler(promhttp.Handler())
		// health check
		router.PathPrefix("/health").Handler(HealthCheck{})
	})
}

func (s Provider) routes(cc infra.Resolver, router web.Router, mw web.RequestMiddleware) {
	conf := config.Get(cc)

	mws := make([]web.HandlerDecorator, 0)
	mws = append(mws,
		mw.AccessLog(log.Module("api")),
		// mw.CORS("*"),
		{{- if eq .WithSessionSupport "Y" }}
		mw.Session(sessions.NewCookieStore([]byte(conf.SessionKey)), "courses", &sessions.Options{MaxAge: 86400 * 30 * 12, Path: "/"}),
		{{- end }}
	)

    {{- if eq .WithSessionSupport "Y" }}
	// 存储在 session 中的对象必须在这里注册，否则无法序列化
	// gob.Register(controller.User{})

	// authMW := mw.BeforeInterceptor(func(ctx web.Context) web.Response {
    // 	if str.HasPrefixes(ctx.CurrentRoute().GetName(), []string{"auth:login", "inspect:"}) || str.HasSuffixes(ctx.CurrentRoute().GetName(), []string{"@public"}) {
    // 		return nil
    // 	}
    //
    // 	_, ok := ctx.Session().Values["user_login"]
    // 	if !ok {
    // 		return ctx.JSONWithCode(web.M{"error": "access denied"}, http.StatusUnauthorized)
    // 	}
    //
    // 	return nil
    // })
    //
    // mws = append(mws, authMW)
	{{- end }}

	router.WithMiddleware(mws...).Controllers(
		"/api",
		controllers(cc, conf)...,
	)
}

type HealthCheck struct{}

func (h HealthCheck) ServeHTTP(writer http.ResponseWriter, request *http.Request) {
	writer.Header().Add("Content-Type", "application/json")
	writer.WriteHeader(http.StatusOK)
	_, _ = writer.Write([]byte(`{"status": "UP"}`))
}
